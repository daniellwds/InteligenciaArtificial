# -*- coding: utf-8 -*-
"""BTC-USD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9dcGMQqum2Qc_sSyLm7vI3Jh-nM_ggs
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
import plotly.graph_objects as go 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

DataSet=pd.read_csv('BTC-USD_LAST_30_DAYS.csv')

DataSet

fig = go.Figure(data=[go.Candlestick(x=DataSet['Date'],
                open=DataSet['Open'], high=DataSet['High'],
                low=DataSet['Low'], close=DataSet['Close'])])

fig.update_layout(xaxis_rangeslider_visible=False)  
fig.show()



"""### Periodo desde o inicio do IPO do bitcoin """

DataSet=pd.read_csv('BTC-USD_ALL_TIME.csv')
DataSet=DataSet.dropna()
DataSet

DataSet.describe()

"""### Inicialmente iremos criar uma RNN baseada apenas no Valor de Abertura"""

plt.scatter(DataSet['Date'],DataSet['Open'],)
plt.show()

base_treinamento = DataSet.iloc[:, 1:2].values

base_treinamento

"""### Normalizar os dados da ação"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
DataScaled=scaler.fit_transform(base_treinamento)

plt.scatter(DataSet['Date'],DataScaled,)
plt.show()
print(DataScaled)

"""### Definição dos previsores"""

previsores = []
preco_real = []
NRecursao = 90
DataSetLen = len(DataScaled) #quantidade de dados no dataset
print(DataSetLen)

for i in range(NRecursao, DataSetLen):
    previsores.append(DataScaled[i-NRecursao:i,0])
    preco_real.append(DataScaled[i,0])

previsores, preco_real = np.array(previsores), np.array(preco_real)

previsores.shape

"""### Transformar para o formato do Tensor do Keras"""

previsores = np.reshape(previsores, (previsores.shape[0], previsores.shape[1], 1))

previsores.shape

"""### Estrutura da Rede Neural"""

# Camada de entrada
regressor = Sequential()
regressor.add(LSTM(units = 100, return_sequences = True, input_shape = (previsores.shape[1], 1)))
regressor.add(Dropout(0.3))

# Cada Oculta 1
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.3))

# Cada Oculta 2
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.3))

# Cada Oculta 3
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.3))

# Camada de Saída
regressor.add(Dense(units = 1, activation = 'linear'))

"""### Construindo a Rede"""

regressor.compile(optimizer = 'rmsprop', loss = 'mean_squared_error',
                  metrics = ['mean_absolute_error'])
regressor.fit(previsores, preco_real, epochs = 100, batch_size = 32)

"""### Conjunto de dados para o Teste"""

DataSet_teste=pd.read_csv('BTC-USD_LAST_30_DAYS.csv')

preco_real_teste = DataSet_teste.iloc[:, 1:2].values

base_completa = pd.concat((DataSet['Open'], DataSet_teste['Open']), axis = 0)
entradas = base_completa[len(base_completa) - len(DataSet_teste) - NRecursao:].values

entradas = entradas.reshape(-1, 1)
entradas = scaler.transform(entradas)

DataSetTestLen = len(DataSet_teste)
NPredictions = 90

X_teste = []
for i in range(NRecursao, DataSetTestLen+NRecursao):
    X_teste.append(entradas[i-NRecursao:i, 0])
    
X_teste = np.array(X_teste)
X_teste = np.reshape(X_teste, (X_teste.shape[0], X_teste.shape[1], 1))

previsoes = regressor.predict(X_teste)
previsoes = scaler.inverse_transform(previsoes)

RNN=[]
predictions_teste=X_teste[0].T
predictions_teste=np.reshape(predictions_teste, (predictions_teste.shape[0], predictions_teste.shape[1], 1))

predictions_teste[0][NRecursao-1][0]=regressor.predict(predictions_teste)[0][0]
RNN.append(regressor.predict(predictions_teste)[0])

for i in range(NPredictions-1):
    predictions_teste=np.roll(predictions_teste,-1)
    predictions_teste[0][NRecursao-1][0]=regressor.predict(predictions_teste)[0][0]
    RNN.append(regressor.predict(predictions_teste)[0])
RNN = scaler.inverse_transform(RNN)

print(RNN.mean())
print(previsoes.mean())
print(preco_real_teste.mean())

plt.plot(preco_real_teste, color = 'red', label = 'Preço real')
plt.plot(previsoes, color = 'blue', label = 'Previsões')

plt.title('BTC-USD')
plt.xlabel('Tempo')
plt.ylabel('Valor')
plt.legend()
plt.show()

